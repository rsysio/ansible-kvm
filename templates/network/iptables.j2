# This format is understood by iptables-restore. See `man iptables-restore`.

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
# DHCP packets sent to VMs have no checksum (due to a longstanding bug).
-A POSTROUTING -o {{ kvm_net.bridge.name }} -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill
COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
# Do not masquerade to these reserved address blocks.
-A POSTROUTING -s {{ kvm_net.subnet }} -d 224.0.0.0/24 -j RETURN
-A POSTROUTING -s {{ kvm_net.subnet }} -d 255.255.255.255/32 -j RETURN

-A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE

# forward ports to vms
{% for vm in kvm_vms -%}
{% if vm.ip is defined and vm.mac is defined and vm.ports is defined -%}
{% for port in vm.ports -%}
-A PREROUTING -d {{ ansible_default_ipv4.address }} -p tcp --dport {{ port.host }} -j DNAT --to {{ vm.ip }}:{{ port.guest }}
{% endfor -%}
{% endif -%}
{% endfor -%}

# Masquerade all packets going from VMs to the LAN/Internet.
-A POSTROUTING -s {{ kvm_net.subnet }} ! -d {{ kvm_net.subnet }} -p tcp -j MASQUERADE --to-ports 1024-65535
-A POSTROUTING -s {{ kvm_net.subnet }} ! -d {{ kvm_net.subnet }} -p udp -j MASQUERADE --to-ports 1024-65535
-A POSTROUTING -s {{ kvm_net.subnet }} ! -d {{ kvm_net.subnet }} -j MASQUERADE
COMMIT

*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# Allow basic INPUT traffic.
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT

# Accept SSH connections.
-A INPUT -p tcp -m tcp --syn -m conntrack --ctstate NEW --dport 22 -j ACCEPT

# OpenVpn
-A INPUT -m state --state NEW -p udp --dport 1194 -j ACCEPT

# Accept DNS (port 53) and DHCP (port 67) packets from VMs.
-A INPUT -i {{ kvm_net.bridge.name }} -p udp -m udp -m multiport --dports 53,67 -j ACCEPT
-A INPUT -i {{ kvm_net.bridge.name }} -p tcp -m tcp -m multiport --dports 53,67 -j ACCEPT

# Accept DNS (port 53) and DHCP (port 67) packets from VPN.
-A INPUT -i tun+ -p udp -m udp -m multiport --dports 53,67 -j ACCEPT
-A INPUT -i tun+ -p tcp -m tcp -m multiport --dports 53,67 -j ACCEPT

# Reject everything else.
-A INPUT -m conntrack --ctstate INVALID -j DROP
-A INPUT -p tcp -m tcp -j REJECT --reject-with tcp-reset
-A INPUT -j REJECT --reject-with icmp-port-unreachable

# forward ports to vms
{% for vm in kvm_vms -%}
{% if vm.ip is defined and vm.mac is defined and vm.ports is defined -%}
{% for port in vm.ports -%}
-A FORWARD -p tcp -d {{ vm.ip }} --dport {{ port.guest }} -j ACCEPT
{% endfor -%}
{% endif -%}
{% endfor -%}

# OpenVpn
-A FORWARD -i tun+ -j ACCEPT
-A FORWARD -i tun+ -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i eth0 -o tun+ -m state --state RELATED,ESTABLISHED -j ACCEPT

# Allow established traffic to the private subnet.
-A FORWARD -d {{ kvm_net.subnet }} -o {{ kvm_net.bridge.name }} -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# Allow outbound traffic from the private subnet.
-A FORWARD -s {{ kvm_net.subnet }} -i {{ kvm_net.bridge.name }} -j ACCEPT
# Allow traffic between virtual machines.
-A FORWARD -i {{ kvm_net.bridge.name }} -o {{ kvm_net.bridge.name }} -j ACCEPT
# Reject everything else.
-A FORWARD -i {{ kvm_net.bridge.name }} -j REJECT --reject-with icmp-port-unreachable
-A FORWARD -o {{ kvm_net.bridge.name }} -j REJECT --reject-with icmp-port-unreachable
COMMIT
